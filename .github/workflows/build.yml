name: Build

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build-termux:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Pull Termux Docker ARM64
        run: docker pull termux/termux-docker:aarch64

      - name: Build Go, Python/Cython
        run: |
          docker \
          create --name termux_build \
          termux/termux-docker:aarch64 \
          sh -c "
            cd /data/data/com.termux/files/home/
            mkdir -p project
            cd project

            rm -f $PREFIX/etc/tls/openssl.cnf

            DEBIAN_FRONTEND=noninteractive pkg update -y
            DEBIAN_FRONTEND=noninteractive yes | pkg upgrade -y

            ln -s $PREFIX/lib/libexpat.so $PREFIX/lib/libexpat.so.1

            DEBIAN_FRONTEND=noninteractive pkg install -y python python-pip clang make git curl ca-certificates

            python -m pip install --upgrade pip setuptools wheel cython build

            curl -LO https://go.dev/dl/go1.25.1.linux-arm64.tar.gz
            tar -C /data/data/com.termux/files/usr -xzf go1.25.1.linux-arm64.tar.gz

            ln -s $PREFIX/etc/tls/cert.pem /etc/ssl/certs/ca-certificates.crt
            export SSL_CERT_FILE="/data/data/com.termux/files/usr/etc/tls/cert.pem"
            export PATH="/data/data/com.termux/files/usr/go/bin:$PATH"
            export GODEBUG=x509ignoreCN=0
            export CGO_ENABLED=0
            export GOOS=linux
            export GOARCH=arm64

            go env -w GOPROXY=https://proxy.golang.org,direct

            git clone https://github.com/CleveTok3125/AniYT
            cd AniYT

            cd src/ani_tracker
            GOTOOLCHAIN=local go build -ldflags='-s -w' -o ../../bin/ani-tracker
            cd ../../

            python -m build --wheel
          "

      - name: Run build container
        run: docker start -a termux_build

      - name: Copy wheel out
        run: docker cp termux_build:/data/data/com.termux/files/home/project/AniYT/dist/. dist/

      - name: Rename wheels
        run: |
            for f in dist/*.whl; do
            mv "$f" "${f/linux/android}"
            done

      - name: Clean up container
        run: docker rm termux_build

      - name: Upload Termux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ani-yt-termux-aarch64
          path: |
            dist/*
            wheelhouse/*

  build-wheels:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            arch: amd64
            ext: ""
          - os: ubuntu-24.04-arm
            goos: linux
            arch: arm64
            ext: ""
          - os: macos-latest
            goos: darwin
            arch: amd64
            ext: ""
          - os: macos-latest
            goos: darwin
            arch: arm64
            ext: ""
          - os: windows-latest
            goos: windows
            arch: amd64
            ext: .exe
          - os: windows-11-arm
            goos: windows
            arch: arm64
            ext: .exe
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.13

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: 1.25.1
        cache: true
        cache-dependency-path: src/ani_tracker/go.sum

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install "setuptools>=77.0.0" wheel build cibuildwheel cython

    - name: Set up QEMU
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build Go binary
      run: |
        cd src/ani_tracker
        go build -ldflags="-s -w" -o ../../bin/ani-tracker${{ matrix.ext }} .
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.arch }}

    - name: Build sdist
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      run: python -m build --sdist --outdir dist

    - name: Build wheels
      uses: pypa/cibuildwheel@v3.1.4
      env:
        CIBW_SKIP: "*-musllinux_* cp38-* cp39-*"
        CIBW_BEFORE_BUILD: |
          pip install --upgrade pip setuptools>=77.0.0 wheel build
          pip install cython
        CIBW_BEFORE_BUILD_WINDOWS: "pip install cython"
        CIBW_ARCHS_LINUX: ${{ matrix.arch == 'amd64' && 'x86_64' || 'aarch64' }}
        CIBW_ARCHS_WINDOWS: ${{ matrix.arch == 'amd64' && 'AMD64' || 'ARM64' }}
        CIBW_ARCHS_MACOS: ${{ matrix.arch == 'amd64' && 'x86_64' || 'arm64' }}
        MACOSX_DEPLOYMENT_TARGET: "12.0"
        CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
        CIBW_TEST_SKIP: >
          *-manylinux_aarch64
          *-musllinux_aarch64
          *-macosx_arm64
          *-win_arm64
        CIBW_OUTPUT_DIR: wheelhouse
        CIBW_REPAIR_WHEEL_COMMAND: ${{ matrix.wheel_type == 'prebuilt' && 'auditwheel repair {wheel} -w {dest}/' || '' }}

    - name: Upload artifacts for matrix
      uses: actions/upload-artifact@v4
      with:
        name: ani-yt-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          dist/*
          wheelhouse/*

  merge-artifacts:
    needs: [build-wheels, build-termux]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout artifacts branch
      uses: actions/checkout@v3
      with:
        ref: artifacts
        fetch-depth: 0

    - name: Fetch main branch
      run: git fetch origin main

    - name: Merge main into artifacts
      run: |
        git merge origin/main --no-ff -m "Sync main into artifacts" || echo "No changes to merge"

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate SHA256 digests
      run: |
        mkdir -p artifacts/digests
        find artifacts -path "artifacts/bin" -prune -o -type f ! -name "*.sha256" -print | while read f; do
        sha256sum "$f" > "artifacts/digests/$(basename "$f").sha256"
        done

    - name: Commit and push all artifacts
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add -f artifacts/*
        git commit -m "Update build artifacts for all OS" || echo "No changes to commit"
        git push origin artifacts

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        generateReleaseNotes: true
        prerelease: ${{ contains(github.ref_name, 'a') || contains(github.ref_name, 'b') || contains(github.ref_name, 'rc') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'dev') }}
        artifacts: |
            artifacts/**/wheelhouse/*.whl
            artifacts/**/dist/*.whl
            artifacts/**/dist/*.tar.gz
            artifacts/digests/*.sha256
            artifacts/help/cli_help.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-simple-index:
    needs: merge-artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: artifacts
          fetch-depth: 0

      - name: Generate PyPI-style simple index
        run: |
          mkdir -p gh-pages/aniyt
          rm -f gh-pages/aniyt/index.html
          for f in artifacts/**/wheelhouse/*.whl artifacts/**/dist/*.whl artifacts/**/dist/*.tar.gz; do
            [ -f "$f" ] || continue
            fname=$(basename "$f")
            cp "$f" gh-pages/aniyt/
          done
          ls gh-pages/aniyt | grep -E '\.whl$|\.tar\.gz$' | sort | while read fname; do
            echo "<a href='$fname'>$fname</a><br>" >> gh-pages/aniyt/index.html
          done

          cp tools/install.py gh-pages/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages

  test-install:
    needs: generate-simple-index
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Test install script
        run: |
          curl -fsSL https://clevetok3125.github.io/AniYT/install.py | python -
