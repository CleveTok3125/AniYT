name: Build

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build-wheels:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            arch: amd64
            ext: ""
          - os: ubuntu-latest
            goos: linux
            arch: arm64
            ext: ""
          - os: macos-latest
            goos: darwin
            arch: amd64
            ext: ""
          - os: macos-latest
            goos: darwin
            arch: arm64
            ext: ""
          - os: windows-latest
            goos: windows
            arch: amd64
            ext: .exe
          - os: windows-latest
            goos: windows
            arch: arm64
            ext: .exe
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.13

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: 1.25.1
        cache: true
        cache-dependency-path: src/ani_tracker/go.sum

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install "setuptools>=77.0.0" wheel build cibuildwheel cython

    - name: Set up QEMU
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build Go binary
      run: |
        cd src/ani_tracker
        go build -ldflags="-s -w" -o ../../bin/ani-tracker${{ matrix.ext }} .
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.arch }}

    - name: Build sdist
      shell: bash
      run: |
        python -m build --sdist --outdir dist
        OS=${{ matrix.os }}
        ARCH=${{ matrix.arch }}
        for f in dist/*.tar.gz; do
            base=$(basename "$f" .tar.gz)
            mv "$f" "dist/${base}-${OS}-${ARCH}.tar.gz"
        done

    - name: Generate C files from Cython
      run: |
        python -c "from Cython.Build import cythonize; cythonize(['src/ani_yt/_query.pyx'], language_level=3)"

    - name: Build pure Python wheel
      if: env.SOURCE_ONLY == '1'
      shell: bash
      run: |
        cp pyproject.toml pyproject.toml.old

        version="${GITHUB_REF_NAME#v}"

        case "${{ matrix.os }}" in
        ubuntu-latest) osname=linux ;;
        macos-latest)  osname=macos ;;
        windows-latest) osname=windows ;;
        *) osname=unknown ;;
        esac
        archname="${{ matrix.arch }}"

        # backup pyproject.toml
        cp pyproject.toml pyproject.toml.bak

        if [[ "$(uname)" == "Darwin" ]]; then
            sed -i '' "s/^version = \".*\"/version = \"${version}+0.${osname}.${archname}\"/" pyproject.toml
        else
            sed -i "s/^version = \".*\"/version = \"${version}+0.${osname}.${archname}\"/" pyproject.toml
        fi

        python -m build --wheel --outdir wheelhouse

        ls -lh wheelhouse
      env:
        SOURCE_ONLY: 1

    - name: Build wheels
      if: env.SOURCE_ONLY != '1'
      uses: pypa/cibuildwheel@v3.1.4
      env:
        SOURCE_ONLY: 1
        CIBW_SKIP: "cp38-*"
        CIBW_BEFORE_BUILD: |
          pip install --upgrade pip setuptools>=77.0.0 wheel build
          pip install cython
        CIBW_BEFORE_BUILD_WINDOWS: "pip install cython"
        CIBW_ARCHS_LINUX: ${{ matrix.arch == 'amd64' && 'x86_64' || 'aarch64' }}
        CIBW_ARCHS_WINDOWS: ${{ matrix.arch == 'amd64' && 'AMD64' || 'ARM64' }}
        CIBW_ARCHS_MACOS: ${{ matrix.arch == 'amd64' && 'x86_64' || 'arm64' }}
        MACOSX_DEPLOYMENT_TARGET: "12.0"
        CIBW_TEST_SKIP: >
          *-manylinux_aarch64
          *-musllinux_aarch64
          *-macosx_arm64
          *-win_arm64
        CIBW_OUTPUT_DIR: wheelhouse
        CIBW_REPAIR_WHEEL_COMMAND: ${{ matrix.wheel_type == 'prebuilt' && 'auditwheel repair {wheel} -w {dest}/' || '' }}

    - name: Upload artifacts for matrix
      uses: actions/upload-artifact@v4
      with:
        name: ani-yt-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          dist/*
          wheelhouse/*
          bin/*

  merge-artifacts:
    needs: build-wheels
    runs-on: ubuntu-latest
    steps:
    - name: Checkout artifacts branch
      uses: actions/checkout@v3
      with:
        ref: artifacts
        fetch-depth: 0

    - name: Fetch main branch
      run: git fetch origin main

    - name: Merge main into artifacts
      run: |
        git merge origin/main --no-ff -m "Sync main into artifacts" || echo "No changes to merge"

    # Download all artifacts
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate SHA256 digests
      run: |
        mkdir -p artifacts/digests
        find artifacts -path "artifacts/bin" -prune -o -type f ! -name "*.sha256" -print | while read f; do
        sha256sum "$f" > "artifacts/digests/$(basename "$f").sha256"
        done

    - name: Commit and push all artifacts
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add -f artifacts/*
        git commit -m "Update build artifacts for all OS" || echo "No changes to commit"
        git push origin artifacts

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        generateReleaseNotes: true
        prerelease: ${{ contains(github.ref_name, 'a') || contains(github.ref_name, 'b') || contains(github.ref_name, 'rc') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
        artifacts: |
            artifacts/**/wheelhouse/*.whl
            artifacts/**/dist/*.tar.gz
            artifacts/digests/*.sha256
            artifacts/help/cli_help.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-simple-index:
    needs: merge-artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: artifacts
          fetch-depth: 0

      - name: Generate PyPI-style simple index
        run: |
          mkdir -p gh-pages/aniyt
          rm -f gh-pages/aniyt/index.html
          for f in artifacts/**/wheelhouse/*.whl artifacts/**/dist/*.tar.gz; do
            [ -f "$f" ] || continue
            fname=$(basename "$f")
            cp "$f" gh-pages/aniyt/
          done
          ls gh-pages/aniyt | grep -E '\.whl$|\.tar\.gz$' | sort | while read fname; do
            echo "<a href='$fname'>$fname</a><br>" >> gh-pages/aniyt/index.html
          done

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
